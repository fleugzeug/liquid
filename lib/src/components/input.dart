part of liquid.components;

class TextInputEvent extends ComponentEvent {
  final String value;

  TextInputEvent(TextInputComponent target, this.value) : super(target);
}

class TextInputComponent extends Component {
  String _value;

  TextInputComponent(ComponentBase parent, [this._value = ''])
      : super(parent, new InputElement(type: 'text')) {
    element.onInput.listen((_) {
      _value = (element as InputElement).value;
      emit(new TextInputEvent(this, _value));
    });
  }

  void updateProperties(String newValue) {
    if (_value != newValue) {
      _value = newValue;
      invalidate();
    }
  }

  /// should be auto-generated by Pub Transformer
  static VDomComponent virtual(Object key, ComponentBase parent, [String value = '']) {
    return new VDomComponent(key, (component) {
      if (component == null) {
        return new TextInputComponent(parent, value);
      } else {
        component.updateProperties(value);
        return component;
      }
    });
  }

  void render() {
    (element as InputElement).value = _value;
  }

  void update() {
    (element as InputElement).value = _value;
    super.update();
  }
}
