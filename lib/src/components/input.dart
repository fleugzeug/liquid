part of liquid.components;

class TextInputEvent extends ComponentEvent {
  final String value;

  TextInputEvent(TextInputComponent target, this.value) : super(target);
}

class TextInputComponent extends Component {
  String value;

  TextInputComponent(Object key, ComponentBase parent,
      {Symbol className, this.value: ''})
      : super(parent, new InputElement(type: 'text'),
          key: key, className: className) {
    element.onInput.listen((_) {
      value = (element as InputElement).value;
      emit(new TextInputEvent(this, value));
    });
  }

  void updateProperties(String newValue) {
    if (value != newValue) {
      value = newValue;
      invalidate();
    }
  }

  /// should be auto-generated by Pub Transformer
  static VDomComponent virtual(Object key, ComponentBase parent,
                               {Symbol className, String value: ''}) {
    return new VDomComponent(key, (component) {
      if (component == null) {
        return new TextInputComponent(key, parent, value: value, className: className);
      } else {
        component.updateProperties(value);
        return component;
      }
    });
  }

  void render() {
    (element as InputElement).value = value;
  }

  void writeDOM() {
    (element as InputElement).value = value;
  }
}
